class Solution {
public:
public:
int pivot(vector<int>& arr, int n) {
    int s = 0;
    int e = n - 1;

    while (s < e) {
        while (s < e && arr[s] == arr[e]) {
            // Skip duplicate elements at the beginning and end.
            s++;
        }

        int mid = s + (e - s) / 2;

        if (arr[mid] > arr[e]) {
            s = mid + 1;
        } else {
        e = mid;
        }
    }

    return s;
}

int bs(vector<int>& arr1,int start,int end,int k)
{
    int s=start;
    int e=end;
    
     while(s<=e)
     {
         int m=s+(e-s)/2;
         
         if(arr1[m]==k)
         {
             return 1;
         }
         if(k>arr1[m])
         {
             s=m+1;
         }
         else
         e=m-1;
     }
     return 0;
}
    bool search(vector<int>& nums, int target) {
        int si = nums.size();
        int piv = pivot(nums,si);
        if(target>=nums[piv]&&target<=nums[si-1])
        return bs(nums,piv,si-1,target);
        else
        return bs(nums,0,piv-1,target);
        
    }
};