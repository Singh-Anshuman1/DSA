//
You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

 

Example 1:

Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.


class Solution {
public:
    vector<int> find(double target,vector<int>& arr)
    {
        int n=arr.size();
        int num=arr[0];
        int den=arr[n-1];
        int i=0;
        int count=0;
        vector<int>ans1(3,0);
        for(int j=1;j<arr.size();j++)
        {
            if(double(arr[i])<=double(arr[j])*target)
            {
            i++;
            }
            count +=  i;
            if(double(arr[i-1]*den)>double(arr[j]*num))
            {
                num=arr[i-1];
                den=arr[j];

            }
        }
        ans1[0]=count;
        ans1[1]=num;
        ans1[2]=den;
        return ans1;

    }
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        int n=arr.size();
        double low=double(arr[0])/double(arr[n-1]);
        double high=1.0;
       
        while(low<high)
        {
            double mid=(low+high)/2;
            vector<int>ans(3,0);
            ans=find(mid,arr);
            int count=ans[0];
            if(count>k)
            high=mid;
            else if(count<k)
            low=mid;
            else
            {
                vector<int>ans2(2,0);
                ans2[0]=ans[1];
                ans2[1]=ans[2];
                return ans2;
            }
        }
        return {};
