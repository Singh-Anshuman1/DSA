//You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.





class Solution {
public:
    bool is_possible(vector<int>& bloomDay, int m, int k,int day)
    {
        int count=0;
        int req=0;
        for(int i=0;i<bloomDay.size();i++)
        {
            if(bloomDay[i]<=day)
            {
            count++;
            if(count==k)
            {
                req+=1;
                count=0;
            }
            }
            else
            count=0;
        }
        if(req>=m)
        return 1;
        else
        return 0;

    }
    int minDays(vector<int>& bloomDay, int m, int k) {

        long long  total_flowers=(long long)m*(long long)k;
        long long  capacity=bloomDay.size();
        // to check if required flowers are more than the capacity of garden
        if(total_flowers>capacity)
        return -1;
        int ans;
        int start=*min_element(bloomDay.begin(), bloomDay.end());
        int end=*max_element(bloomDay.begin(), bloomDay.end());
        int mid=start+(end-start)/2;
        while(start<=end)
        {
            if(is_possible(bloomDay,m,k,mid))
            {
            ans=mid;
            end=mid-1;
            }
            else
            start=mid+1;
        mid=start+(end-start)/2;
        }

        return ans;
    }
};


