//You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2


Hint * = Every duplicate element to the left of single element(required ans) will occur in sequence of even -odd and every duplicate element to the left of single element will occur in sequence of odd-even

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
        //boundary cases
        if(n==1)
        return nums[0];
        if(nums[0]!=nums[1])
        return nums[0];
        if(nums[n-1]!=nums[n-2])
        return nums[n-1];

        int s=1;
        int e=n-2;
        int m=s+(e-s)/2;
        int flag;
        while(s<=e)
        {
            if(nums[m]!=nums[m-1] && nums[m]!=nums[m+1])
            {
                flag=nums[m];
                break;
            }
             if((m%2==1 && nums[m]==nums[m-1])||(m%2==0 && nums[m]==nums[m+1])) //element on right half
            s=m+1;
            else if((m%2==1 && nums[m]==nums[m+1])||(m%2==0 && nums[m]==nums[m-1])) //element on left half
            e=m-1;
            m=s+(e-s)/2;

        }
        return flag;
    }
};